{
    "contents" : "# Background maps in R\nIn this tutorial we will see how basic tweaks can make maps more readable and \nattractive, focussing on the addition of basemaps using the ggmap package. \nWe assume little background knowledge of graphics in R, so begin with a basic graph\nin R's basic graphics package. Then we will move on to the graphically superiour ggplot/ggmap\napproach, to show how maps can be built as layers.\n\n## Introduction: tweaking graphics in R\nR has very powerful graphical functionality, but a reputation for being fiddly if \nyou aim to create beautiful images, rather than the sparse yet functional base graphics\nsuch as:\n```{r}\nx <- seq(from = -pi, to = pi, by = 0.1)\ny <- sin(x)\nplot(x,y)\n```\n\nIt is quite easy to tweak the base graphics, with a few extra lines of code:\n```{r}\npar(family = \"serif\", font = 5)\nplot(x,y, type = \"line\", col = \"blue\", \n     cex.axis = 0.7, # make axis labels smaller\n     ylab = \"sin(x)\",\n     lty = 2, # make the line dotted\n     lwd = 3, # make line thicker\n     bty = \"n\", # remove the bounding box\n     asp = 1\n     ) \ndev.off() # this resets the plot options\n```\nAlthough we will be using the more recent ggplot package, which works differently from R's base graphics,\nthe principles will be the same: you start with a basic representation of your data and add \nfurther details and optional bells and whistles as you proceed.\n\n## Downloading and unzipping the files\nBefore proceeding, we first need some geographical data, ready for plotting.\nR can handle almost any geographical data you through at it, provided the appropriate packages \nare installed. You can load data that's already on your computer; we assume you \nhave no geographical data and download directly from the internet. \n\nYou can download the files outside of R using a browser or any other method.\nBecause R has its own functions for downloading and unzipping files, \nand it's fun to see what else R can do beyond analysing and plotting data, \nwe will download the files directly from the R command line.\n\n```{r}\ndownload.file(url = \"http://spatialanalysis.co.uk/wp-content/uploads/2010/09/London_Sport.zip\", \n              destfile = \"London_Sport.zip\") # download file from the internet\n\nlist.files() # shows what's in your working director - should include zip file\nunzip(\"London_Sport.zip\") # unzip the zip file\nlist.files() # should have .shp file added\n```\n\n## Installing geographical packages\nAt present although we have the data files, there is very little we can do with \nthem because geographical functions are lacking from R's base install.\nTherefore we need to install them. It is important to think carefully about \nwhat packages will be needed in R for a given project and ensure they are \nloaded at the right time. There are \n\nTo see what is currently installed, type the following:\n```{r}\nsearch()\n```\nAs you can see, there are already multiple packages in the base installation. \nFor plotting basemaps and geographical analysis more generally, however, \nwe need more:\n```{r}\nSpatialPolygonsDataFrame\n# install.packages(\"rgeos\", \"sp\") # uncomment this line if rgeos and sp are not already on your system\nlibrary(rgdal) # add the powerful rgdal package - note that it automatically loads the sp package also\nsearch() # see the sp and rgeos packages has now been added \n??rgdal # shows you what rgdal can do\nhead(SpatialPolygonsDataFrame) # now you should see a load of code, telling you the command is available\n```\nIf you need multiple R packages, you can save time by creating an object of you favourite packages.\nHere some of my favourites (not run as we don't need all of them):\n```{r, eval=F}\nx = c(\"ggplot2\", \"rgeos\", \"reshape2\", \"foreign\", \"plyr\")\nlapply(x, require, character.only = T)  # the R packages we'll be using\n```\n(Note: you may want to consider adding a line similar to this to your\n[.Rprofile file](http://www.statmethods.net/interface/customizing.html), \nso they load when R initialises, if you use some packages frequently.\nSome people put a lot of time into \n[their .Rprofiles!](http://stackoverflow.com/questions/1189759/expert-r-users-whats-in-your-rprofile).)\n\nPackages can be 'unloaded' using the following command:\n```{r}\n# detach(\"package:rgdal\", unload=TRUE) \n# Do not run this, unless you want to remove rgdal functionality\n```\n\n\n## Basic maps with the sp package \n```{r}\nlnd <- readOGR(dsn=\".\", \"london_sport\")\nplot(lnd)\n```\nNote that the plot is quite different from that displayed in the first plot:\nit has not axes for example. What is going on here? The sp package actually comes \nwith its own plotting command, which is called automatically if the plot is an S4 \nobject. So the actual command that is called is `sp::plot` or \"use the plot function from the \nsp package\" in plain English. The following code shows what's going on:\n```{r, eval=F}\n# graphics::plot(lnd) # does not work\nsp::plot(lnd) # does work\n```\n\nWe can add a few bells and whistles to this plot, but for beautiful maps \nharnessing the \"grammar of graphics\", we need to now transition to the ggplot \napproach.\n\n## Basemaps with ggplot\nIn order to plot basemaps in R, we need to ensure that the basemap and the \ndata are using the same coordinate system. Web maps use the \n[Web Merkator](http://spatialreference.org/ref/sr-org/7483/) system. The data\ncomes in OSGB19636:\n```{r}\nbbox(lnd) # this tells us that we are in lat/long \nlnd <- (SpatialPolygonsDataFrame(Sr=spTransform(lnd, CRSobj = CRS(\"+init=epsg:4326\")),\n                                 data=lnd@data))\n```\n\n```{r}\nlnd.f <- fortify(lnd)\nhead(lnd@data)\nhead(lnd.f)\nlnd$id <- row.names(lnd) # provide same column names for join\n\nlnd.f <- join(lnd.f, lnd@data)\nhead(lnd.f)\n```\n\n### The simplest case\nAs with most things in R, there are many ways to create a ggplot graphic in R, and the \nsame applies to maps.  Below we see two identical ways of creating the same plot.\n(a third way would be to move the `data =` argument from geom_polygon and into ggplot).\n```{r}\n(p <- qplot(long, lat, group=group, geom=\"polygon\", data=lnd.f)) \n# this line of code saves the plot as an object (p) \n# because it's enclosed by bracets, it also plots the results\n\n(q <- ggplot() +\n  geom_polygon(data = lnd.f, aes(x = long, y = lat, group = group)))\n```\n\nThe difference between the two ways of plotting becomes apparent when \ntrying to plot objects that do not share the same dimensions as the data frame `lnd.f` (`r nrow(lnd)`).\n```{r, error=T}\n# (p1 <- p + geom_point(aes(x = coordinates(lnd)[,1], y = coordinates(lnd)[,2])))\n# the above code fails because the data frame is set for all layers in qplot - run only to test\n\n\n(q1 <- q + geom_point(aes(x = coordinates(lnd)[,1], y = coordinates(lnd)[,2])))\n# this line of code succeeds because each layer has its own data associated with it\n```\n\n### Basic maps in ggplot2\nThe above images render fine, even with two layers, but it would be \ngenerous to describe them as fully fledged maps at present. This is \nbecause the coordinates are not correct and the background looks, well, \nmore the background of a graph. We also cannot distinguish between the \ndifferent polygons in these maps. These issues are resolved in the code below, \nbuilding on the `q1` plot we saved above.\n```{r}\n(q2 <- q1 + \n  geom_path(data = lnd.f, aes(x = long, y = lat, group = group), color = \"white\") + \n  coord_map() + # this line of code ensures the plot is to scale\n  theme_classic()  # this line removes the distracting grey background\n )\n```\n\n\n### Further modifications\nggplot2 has customisable themes. To make a map in a new style, we can first \nspecify the theme that we want. Say you want a theme with no axes, just like \nthe `sp::plot` function:\n```{r}\ntheme_spmap <- theme(panel.background = element_rect(fill = \"lightgreen\"))\ntheme_spmap <- theme(axis.line = element_blank(),\n        axis.ticks = element_blank(),\n        axis.title.x = element_blank(), \n        axis.title.y = element_blank(), \n        axis.text.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.text.y = element_blank(),\n        panel.background = element_rect(fill = \"lightgreen\") # add a light green background, for fun\n        )\nq2 + theme_spmap\n```\n\n### Basemaps\n```{r}\nlibrary(ggmap) # you may have to use install.packages to install it first\nb <- bbox(lnd)\n(lnd.b1 <- ggmap(get_map(location=b))) # download map data for the lnd data and plot\nlnd.b1 + geom_polygon(data = lnd.f, aes(x = long, y = lat, group = group,\n                                        fill = Partic_Per), alpha = 0.5) +\n  scale_fill_continuous(low=\"green\", high=\"red\") # add interesting scale\n```\nThis is is getting better, but note that the map is square whilst the \ndata is more rectangular. To do more things with the base map, we need to \nuse a different source.\n\n```{r}\nlnd.b2 <- ggmap(get_map(location=b, source='stamen',maptype='toner', crop=T))\nlnd.b2 + geom_polygon(data = lnd.f, aes(x = long, y = lat, group = group,\n                                        fill = Partic_Per), alpha = 0.5)\n\n```\n\nTo increase the resolution of the map, we use the zoom command. The `stamen` source \ncan create multiple tiles; the standard Google maps source cannot\n\n```{r}\nlnd.b3 <- ggmap(get_map(location=b, source='stamen',maptype='toner', crop=T, zoom = 11))\nlnd.b3 + geom_polygon(data = lnd.f, aes(x = long, y = lat, group = group,\n                                        fill = Partic_Per), alpha = 0.5)\n\n```\n\n\n\n\n",
    "created" : 1385037388426.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "394376084",
    "id" : "49EED720",
    "lastKnownWriteTime" : 1385038903,
    "path" : "~/Intro-2-R/overviews.Rmd",
    "project_path" : "overviews.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}